
import me.josecomparotto.compilador.semantic.*;
import me.josecomparotto.compilador.semantic.value.expression.*;
import me.josecomparotto.compilador.semantic.instruction.*;
import me.josecomparotto.compilador.semantic.value.literal.*;
import me.josecomparotto.compilador.semantic.value.*;

terminal String
    SEMICOLON,
    KEYWORD_KAKU,
    KEYWORD_MOSHI,
    KEYWORD_SOREIGAI,
    KEYWORD_TAMENI,
    KEYWORD_KARA,
    KEYWORD_MADE,
    KEYWORD_HO,
    KEYWORD_NISE,
    KEYWORD_SHIN,
    KEYWORD_SHINAI,
    KEYWORD_MO,
    KEYWORD_MATA,
    INPUT_VALUE_KEY,
    INPUT_LINE_KEY,
    CONCAT_OPERATOR,
    PRODUCT_OPERATOR,
    DIV_OPERATOR,
    ADD_OPERATOR,
    SUB_OPERATOR,
    NOT_EQUALS_OPERATOR,
    EQUALS_OPERATOR,
    LESS_THEN_OR_EQUALS_OPERATOR,
    GREATER_THEN_OR_EQUALS_OPERATOR,
    GREATER_THEN_OPERATOR,
    LESS_THEN_OPERATOR,
    ASSIGNMENT_OPERATOR,
    PARENTHESIS_OPENING,
    PARENTHESIS_CLOSURE,
    BLOCK_OPENING,
    BLOCK_CLOSURE,
    NUMBER_LITERAL,
    TEXT_LITERAL,
    IDENTIFIER;


non terminal Program program;
non terminal Context context_block, context;
non terminal Instruction
    instruction,
    command,
    output_command,
    assign_command,
    structure,
    conditional_structure,
    simple_conditional_structure,
    complete_conditional_structure,
    repeat_structure;
non terminal Value
    value,
    input_value,
    input_line,
    concat_expression,
    logic_or_expression,
    logic_and_expression,
    logic_not_expression,
    rel_expression,
    aritm_unary_expression,
    aritm_add_binary_expression,
    aritm_mult_binary_expression,
    primitive_value,
    const,
    bool_literal;
non terminal String
    logic_or_operator,
    logic_and_operator,
    logic_not_operator;


program ::= context:s {:
    RESULT = new Program(s);

    System.out.println(RESULT.getJava());
:};

/* Escopos */
context_block ::= BLOCK_OPENING context:s BLOCK_CLOSURE {: RESULT = s; :};

context ::=
    instruction:i {: RESULT = new Context(i); :} |
    context:c instruction:i {: c.addInstruction(i); RESULT = c; :};

/* Instruções: Comandos e Estruturas */
instruction ::= command:c SEMICOLON {: RESULT = c; :} | structure:s {: RESULT = s; :};

command ::= 
    output_command:c {: RESULT = c; :} |
    assign_command:c {: RESULT = c; :};

structure ::=
    conditional_structure:s {: RESULT = s; :} |
    repeat_structure:s {: RESULT = s; :};

/* Comando de entrada */
input_value ::= INPUT_VALUE_KEY {: RESULT = new InputValue(); :};
input_line ::= INPUT_LINE_KEY {: RESULT = new InputLine(); :};

/* Comando de saída. Aceita um ou vários parâmetros */
output_command ::=
    KEYWORD_KAKU PARENTHESIS_OPENING value:v PARENTHESIS_CLOSURE {: RESULT = new OutputCommand(v); :};

/* Comando de atribuição */
assign_command ::= IDENTIFIER:i ASSIGNMENT_OPERATOR value:v {: RESULT = new AssignCommand(i, v); :} ;

/* Estrutura condicional */
conditional_structure ::=
    complete_conditional_structure:s {: RESULT = s; :} |
    simple_conditional_structure:s {: RESULT = s; :};

complete_conditional_structure ::=
    KEYWORD_MOSHI
    PARENTHESIS_OPENING
    value:v
    PARENTHESIS_CLOSURE
    context_block:tcb
    KEYWORD_SOREIGAI
    context_block:ecb {: RESULT = new ConditionalStructure(v, tcb, ecb); :};

simple_conditional_structure ::=
    KEYWORD_MOSHI PARENTHESIS_OPENING
    value:v
    PARENTHESIS_CLOSURE
    context_block:tcb {: RESULT = new ConditionalStructure(v, tcb); :};

/* Estrutura de repetição "para" */
repeat_structure ::= 
    KEYWORD_TAMENI IDENTIFIER:id
    KEYWORD_KARA value:from
    KEYWORD_MADE value:to
    KEYWORD_HO value:step
    context_block:cb {: RESULT = new RepeatStructure(id, from, to, step, cb); :};
repeat_structure ::= 
    KEYWORD_TAMENI IDENTIFIER:id
    KEYWORD_KARA value:from
    KEYWORD_MADE value:to
    context_block:cb {: RESULT = new RepeatStructure(id, from, to, cb); :};

value ::= concat_expression:e {: RESULT = e; :};

/* Expressão de Concatenação */
concat_expression ::= 
    concat_expression:a
    CONCAT_OPERATOR
    logic_or_expression:b {: RESULT = new ConcatExpression(a, b); :};
concat_expression ::= logic_or_expression:e {: RESULT = e; :};

/* Expressões Lógicas */
logic_or_expression ::= 
    logic_or_expression:a
    logic_or_operator
    logic_and_expression:b {: RESULT = new OrExpression(a, b); :};
logic_or_expression ::= logic_and_expression:e {: RESULT = e; :};

logic_and_expression ::= 
    logic_and_expression:a
    logic_and_operator
    logic_not_expression:b {: RESULT = new AndExpression(a, b); :};
logic_and_expression ::= logic_not_expression:e {: RESULT = e; :};

logic_not_expression ::= 
    logic_not_operator
    rel_expression:a {: RESULT = new NotExpression(a); :};
logic_not_expression ::= rel_expression:e {: RESULT = e; :};

/* Expressões Relacionais */
rel_expression ::= 
    aritm_add_binary_expression:a
    EQUALS_OPERATOR
    aritm_add_binary_expression:b {: RESULT = new EqualsExpression(a, b); :};
rel_expression ::= 
    aritm_add_binary_expression:a
    NOT_EQUALS_OPERATOR
    aritm_add_binary_expression:b {: RESULT = new NotEqualsExpression(a, b); :};
rel_expression ::= 
    aritm_add_binary_expression:a
    LESS_THEN_OPERATOR
    aritm_add_binary_expression:b {: RESULT = new LessThenExpression(a, b); :};
rel_expression ::= 
    aritm_add_binary_expression:a
    GREATER_THEN_OPERATOR
    aritm_add_binary_expression:b {: RESULT = new GreaterThenExpression(a, b); :};
rel_expression ::= 
    aritm_add_binary_expression:a
    GREATER_THEN_OR_EQUALS_OPERATOR
    aritm_add_binary_expression:b {: RESULT = new GreaterThenOrEqualsExpression(a, b); :};
rel_expression ::= 
    aritm_add_binary_expression:a
    LESS_THEN_OR_EQUALS_OPERATOR
    aritm_add_binary_expression:b {: RESULT = new LessThenOrEqualsExpression(a, b); :};
rel_expression ::= aritm_add_binary_expression:e {: RESULT = e; :};

/* Expressões Aritméticas */
aritm_add_binary_expression ::= 
    aritm_add_binary_expression:a
    ADD_OPERATOR
    aritm_mult_binary_expression:b {: RESULT = new AddExpression(a, b); :};
aritm_add_binary_expression ::= 
    aritm_add_binary_expression:a
    SUB_OPERATOR
    aritm_mult_binary_expression:b {: RESULT = new SubExpression(a, b); :};
aritm_add_binary_expression ::= aritm_mult_binary_expression:e {: RESULT = e; :};

aritm_mult_binary_expression ::= 
    aritm_mult_binary_expression:a
    PRODUCT_OPERATOR
    aritm_unary_expression:b {: RESULT = new ProductExpression(a, b); :};
aritm_mult_binary_expression ::= 
    aritm_mult_binary_expression:a
    DIV_OPERATOR
    aritm_unary_expression:b {: RESULT = new DivExpression(a, b); :};
aritm_mult_binary_expression ::= aritm_unary_expression:e {: RESULT = e; :};

aritm_unary_expression ::=
    ADD_OPERATOR
    primitive_value:a {: RESULT = new UnaryAddExpression(a); :};
aritm_unary_expression ::=
    SUB_OPERATOR
    primitive_value:a {: RESULT = new UnarySubExpression(a); :};
aritm_unary_expression ::= primitive_value:e {: RESULT = e; :};

primitive_value ::=
    const:c {: RESULT = c; :} |
    IDENTIFIER:id {: RESULT = new VariableValue(id); :} |
    PARENTHESIS_OPENING value:v PARENTHESIS_CLOSURE {: RESULT = v; :} |
    input_value:v {: RESULT = v; :} |
    input_line:v {: RESULT = v; :};

/* Constantes (literais) */
const ::=
    TEXT_LITERAL:c {: RESULT = new TextLiteral(c); :} |
    NUMBER_LITERAL:c {: RESULT = new NumberLiteral(c); :} |
    bool_literal:c {: RESULT = c; :} ;
    
bool_literal ::=
    KEYWORD_SHIN:c {: RESULT = new BooleanLiteral(true); :} |
    KEYWORD_NISE:c {: RESULT = new BooleanLiteral(false); :}; 

/* Operadores */
logic_or_operator ::= KEYWORD_MATA:o {: RESULT = o; :};
logic_and_operator ::= KEYWORD_MO:o {: RESULT = o; :};
logic_not_operator ::= KEYWORD_SHINAI:o {: RESULT = o; :};














