import me.josecomparotto.cbr.syntax.Rule;

terminal Object
    SEMICOLON,
    COMMA,
    KEYWORD_KAKU,
    KEYWORD_YOMU,
    KEYWORD_MOSHI,
    KEYWORD_SOREIGAI,
    KEYWORD_TAMENI,
    KEYWORD_KARA,
    KEYWORD_MADE,
    KEYWORD_HO,
    KEYWORD_NISE,
    KEYWORD_SHIN,
    KEYWORD_SHINAI,
    KEYWORD_MO,
    KEYWORD_MATA,
    PRODUCT_OPERATOR,
    DIV_OPERATOR,
    SUM_OPERATOR,
    SUB_OPERATOR,
    NOT_EQUALS_OPERATOR,
    EQUALS_OPERATOR,
    LESS_THEN_OR_EQUALS_OPERATOR,
    GREATER_THEN_OR_EQUALS_OPERATOR,
    GREATER_THEN_OPERATOR,
    LESS_THEN_OPERATOR,
    ASSIGNMENT_OPERATOR,
    PARENTHESIS_OPENING,
    PARENTHESIS_CLOSURE,
    BLOCK_OPENING,
    BLOCK_CLOSURE,
    NUMBER_LITERAL,
    TEXT_LITERAL,
    IDENTIFIER;

non terminal Object
    program,
    scope_block,
    scope,
    instruction,
    command,
    structure,
    input_command,
    output_command,
    assign_command,
    conditional_structure,
    simple_conditional_structure,
    repeat_structure,
    parameters,
    value,
    logic_or_expression,
    logic_and_expression,
    logic_not_expression,
    rel_expression,
    aritm_add_binary_expression,
    aritm_mult_binary_expression,
    aritm_unary_expression,
    primitive_value,
    const,
    bool_literal,
    aritm_add_operator,
    aritm_mult_operator,
    rel_operator,
    logic_or_operator,
    logic_and_operator,
    logic_not_operator;


program ::= scope:s {:
    RESULT = new Rule("program", s);

    System.out.println(RESULT);
:};

/* Escopos */
scope_block ::= BLOCK_OPENING scope:s BLOCK_CLOSURE {: RESULT = s; :};

scope ::= instruction:i {: RESULT = new Rule("scope", i); :} | scope:s instruction:i {: RESULT = new Rule((Rule)s, i); :};

/* Instruções: Comandos e Estruturas */
instruction ::= command:c SEMICOLON {: RESULT = c; :} | structure:s {: RESULT = s; :};

command ::= 
    input_command:c {: RESULT = c; :} |
    output_command:c {: RESULT = c; :} |
    assign_command:c {: RESULT = c; :};

structure ::=
    conditional_structure:s {: RESULT = s; :} |
    repeat_structure:s {: RESULT = s; :};

/* Comando de entrada */
input_command ::= KEYWORD_YOMU PARENTHESIS_OPENING IDENTIFIER:i PARENTHESIS_CLOSURE {: RESULT = new Rule("input_command", i); :};

/* Comando de saída. Aceita um ou vários parâmetros */
output_command ::=
    KEYWORD_KAKU PARENTHESIS_OPENING parameters:p PARENTHESIS_CLOSURE {: RESULT = new Rule("output_command", p); :};

/* Comando de atribuição */
assign_command ::= IDENTIFIER:i ASSIGNMENT_OPERATOR value:v {: RESULT = new Rule("assign_command", i, v); :} ;

/* Estrutura condicional */
conditional_structure ::=
    simple_conditional_structure:s {: RESULT = s; :} |
    simple_conditional_structure:s KEYWORD_SOREIGAI scope_block:sb {: RESULT = new Rule((Rule)s, sb); :} ;

simple_conditional_structure ::=
    KEYWORD_MOSHI PARENTHESIS_OPENING value:v PARENTHESIS_CLOSURE scope_block:sb {: RESULT = new Rule("conditional_structure", v, sb); :};

/* Estrutura de repetição "para" */
repeat_structure ::= 
    KEYWORD_TAMENI IDENTIFIER:id
    KEYWORD_KARA value:from
    KEYWORD_MADE value:to
    KEYWORD_HO value:step
    scope_block:sb {: RESULT = new Rule("repeat_structure", id, from, to, step, sb); :};
repeat_structure ::= 
    KEYWORD_TAMENI IDENTIFIER:id
    KEYWORD_KARA value:from
    KEYWORD_MADE value:to
    scope_block:sb {: RESULT = new Rule("repeat_structure", id, from, to, sb); :};


parameters ::= value:v {: RESULT = new Rule("parameters", v); :} | parameters:p COMMA value:v {: RESULT = new Rule((Rule)p, v); :};

value ::= logic_or_expression:e {: RESULT = e; :};

/* Expressões Lógicas */
logic_or_expression ::= 
    logic_or_expression:a
    logic_or_operator:o
    logic_and_expression:b {: RESULT = new Rule("binary_expression", o, a, b); :};
logic_or_expression ::= logic_and_expression:e {: RESULT = e; :};

logic_and_expression ::= 
    logic_and_expression:a
    logic_and_operator:o
    logic_not_expression:b {: RESULT = new Rule("binary_expression", o, a, b); :};
logic_and_expression ::= logic_not_expression:e {: RESULT = e; :};

logic_not_expression ::= 
    logic_not_operator:o
    rel_expression:a {: RESULT = new Rule("unary_expression", o, a); :};
logic_not_expression ::= rel_expression:e {: RESULT = e; :};

/* Expressões Relacionais */
rel_expression ::= 
    aritm_add_binary_expression:a
    rel_operator:o
    aritm_add_binary_expression:b {: RESULT = new Rule("binary_expression", o, a, b); :};
rel_expression ::= aritm_add_binary_expression:e {: RESULT = e; :};

/* Expressões Aritméticas */
aritm_add_binary_expression ::= 
    aritm_add_binary_expression:a
    aritm_add_operator:o
    aritm_mult_binary_expression:b {: RESULT = new Rule("binary_expression", o, a, b); :};
aritm_add_binary_expression ::= aritm_mult_binary_expression:e {: RESULT = e; :};

aritm_mult_binary_expression ::= 
    aritm_mult_binary_expression:a
    aritm_mult_operator:o
    aritm_unary_expression:b {: RESULT = new Rule("binary_expression", o, a, b); :};
aritm_mult_binary_expression ::= aritm_unary_expression:e {: RESULT = e; :};

aritm_unary_expression ::=
    aritm_add_operator:o
    primitive_value:a {: RESULT = new Rule("unary_expression", o, a); :};
aritm_unary_expression ::= primitive_value:e {: RESULT = e; :};

primitive_value ::=
    const:c {: RESULT = c; :} |
    IDENTIFIER:id {: RESULT = new Rule("variable_value", id); :} |
    PARENTHESIS_OPENING value:v PARENTHESIS_CLOSURE {: RESULT = new Rule("parenthesis", v); :};

/* Constantes (literais) */
const ::=
    TEXT_LITERAL:c {: RESULT = new Rule("text_literal", c); :} |
    NUMBER_LITERAL:c {: RESULT = new Rule("number_literal", c); :} |
    bool_literal:c {: RESULT = new Rule("bool_literal", c); :} ;
bool_literal ::= KEYWORD_SHIN:c {: RESULT = c; :} | KEYWORD_NISE:c {: RESULT = c; :}; 

/* Operadores */
aritm_add_operator ::=
    SUM_OPERATOR:o {: RESULT = o; :} |
    SUB_OPERATOR:o {: RESULT = o; :};

aritm_mult_operator ::=
    PRODUCT_OPERATOR:o {: RESULT = o; :} |
    DIV_OPERATOR:o {: RESULT = o; :};

rel_operator ::= 
    EQUALS_OPERATOR:o {: RESULT = o; :} |
    NOT_EQUALS_OPERATOR:o {: RESULT = o; :} |
    LESS_THEN_OR_EQUALS_OPERATOR:o {: RESULT = o; :} |
    GREATER_THEN_OR_EQUALS_OPERATOR:o {: RESULT = o; :} |
    LESS_THEN_OPERATOR:o {: RESULT = o; :} |
    GREATER_THEN_OPERATOR:o {: RESULT = o; :};

logic_or_operator ::= KEYWORD_MATA:o {: RESULT = o; :};
logic_and_operator ::= KEYWORD_MO:o {: RESULT = o; :};
logic_not_operator ::= KEYWORD_SHINAI:o {: RESULT = o; :};














