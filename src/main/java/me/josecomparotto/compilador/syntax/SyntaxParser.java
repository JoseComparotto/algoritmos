
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Sat Apr 15 14:54:41 UTC 2023
//----------------------------------------------------

package me.josecomparotto.compilador.syntax;

import me.josecomparotto.compilador.syntax.Rule;

/** CUP v0.10j generated parser.
  * @version Sat Apr 15 14:54:41 UTC 2023
  */
public class SyntaxParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntaxParser() {super();}

  /** Constructor which sets the default scanner. */
  public SyntaxParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\003\003\000\002\002\004\000\002\004" +
    "\005\000\002\005\003\000\002\005\004\000\002\006\004" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\011\006\000\002\012\006\000\002\013\005\000\002\014" +
    "\003\000\002\014\005\000\002\015\007\000\002\016\013" +
    "\000\002\016\011\000\002\017\003\000\002\017\005\000" +
    "\002\020\003\000\002\021\005\000\002\021\003\000\002" +
    "\022\005\000\002\022\003\000\002\023\004\000\002\023" +
    "\003\000\002\024\005\000\002\024\003\000\002\025\005" +
    "\000\002\025\003\000\002\026\005\000\002\026\003\000" +
    "\002\027\004\000\002\027\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\005\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\003\000\002\032\003" +
    "\000\002\033\003\000\002\033\003\000\002\034\003\000" +
    "\002\034\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\036\003\000\002\037\003\000\002\040\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\014\006\005\007\020\010\014\012\012\044" +
    "\016\001\002\000\020\002\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\012\ufffe\041\ufffe\044\ufffe\001\002\000\004\036\133\001" +
    "\002\000\020\002\ufffb\006\ufffb\007\ufffb\010\ufffb\012\ufffb" +
    "\041\ufffb\044\ufffb\001\002\000\004\004\132\001\002\000" +
    "\004\002\131\001\002\000\004\004\ufff8\001\002\000\004" +
    "\044\120\001\002\000\020\002\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\012\ufff7\041\ufff7\044\ufff7\001\002\000\004\036\114" +
    "\001\002\000\022\002\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\107\012\ufff2\041\ufff2\044\ufff2\001\002\000\004\035\030" +
    "\001\002\000\004\004\ufff9\001\002\000\004\036\025\001" +
    "\002\000\016\002\001\006\005\007\020\010\014\012\012" +
    "\044\016\001\002\000\004\004\ufffa\001\002\000\020\002" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6\041\ufff6\044\ufff6" +
    "\001\002\000\020\002\ufffd\006\ufffd\007\ufffd\010\ufffd\012" +
    "\ufffd\041\ufffd\044\ufffd\001\002\000\004\044\026\001\002" +
    "\000\004\037\027\001\002\000\004\004\ufff5\001\002\000" +
    "\024\016\035\017\051\020\041\025\034\026\033\036\043" +
    "\042\047\043\054\044\040\001\002\000\042\004\uffe3\005" +
    "\uffe3\014\uffe3\015\uffe3\021\uffe3\022\uffe3\025\034\026\033" +
    "\027\101\030\104\031\076\032\100\033\075\034\102\037" +
    "\uffe3\040\uffe3\001\002\000\046\004\uffe1\005\uffe1\014\uffe1" +
    "\015\uffe1\021\uffe1\022\uffe1\023\072\024\071\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\037\uffe1\040\uffe1\001\002\000\022\016\uffd3\017\uffd3\025" +
    "\uffd3\026\uffd3\036\uffd3\042\uffd3\043\uffd3\044\uffd3\001\002" +
    "\000\022\016\uffd4\017\uffd4\025\uffd4\026\uffd4\036\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\001\002\000\046\004\uffd5\005\uffd5" +
    "\014\uffd5\015\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\037\uffd5\040\uffd5\001\002\000\046\004\uffdf\005" +
    "\uffdf\014\uffdf\015\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\037\uffdf\040\uffdf\001\002\000\046\004\uffdc" +
    "\005\uffdc\014\uffdc\015\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\037\uffdc\040\uffdc\001\002\000\046\004" +
    "\uffdb\005\uffdb\014\uffdb\015\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\037\uffdb\040\uffdb\001\002\000\022" +
    "\016\uffc8\017\uffc8\025\uffc8\026\uffc8\036\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\001\002\000\022\004\uffe7\005\uffe7\014\uffe7" +
    "\015\uffe7\021\uffe7\022\uffe7\037\uffe7\040\uffe7\001\002\000" +
    "\024\016\035\017\051\020\041\025\034\026\033\036\043" +
    "\042\047\043\054\044\040\001\002\000\046\004\uffdd\005" +
    "\uffdd\014\uffdd\015\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\037\uffdd\040\uffdd\001\002\000\022\004\uffe9" +
    "\005\uffe9\014\uffe9\015\uffe9\021\063\022\uffe9\037\uffe9\040" +
    "\uffe9\001\002\000\022\004\uffe5\005\uffe5\014\uffe5\015\uffe5" +
    "\021\uffe5\022\uffe5\037\uffe5\040\uffe5\001\002\000\046\004" +
    "\uffd8\005\uffd8\014\uffd8\015\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\037\uffd8\040\uffd8\001\002\000\004" +
    "\004\ufff3\001\002\000\046\004\uffd6\005\uffd6\014\uffd6\015" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\037" +
    "\uffd6\040\uffd6\001\002\000\046\004\uffd7\005\uffd7\014\uffd7" +
    "\015\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\037\uffd7\040\uffd7\001\002\000\016\016\035\017\051\036" +
    "\043\042\047\043\054\044\040\001\002\000\046\004\uffd9" +
    "\005\uffd9\014\uffd9\015\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\037\uffd9\040\uffd9\001\002\000\022\016" +
    "\035\017\051\025\034\026\033\036\043\042\047\043\054" +
    "\044\040\001\002\000\020\004\uffeb\005\uffeb\014\uffeb\015" +
    "\uffeb\022\060\037\uffeb\040\uffeb\001\002\000\024\016\035" +
    "\017\051\020\041\025\034\026\033\036\043\042\047\043" +
    "\054\044\040\001\002\000\024\016\uffca\017\uffca\020\uffca" +
    "\025\uffca\026\uffca\036\uffca\042\uffca\043\uffca\044\uffca\001" +
    "\002\000\022\004\uffea\005\uffea\014\uffea\015\uffea\021\063" +
    "\022\uffea\037\uffea\040\uffea\001\002\000\024\016\035\017" +
    "\051\020\041\025\034\026\033\036\043\042\047\043\054" +
    "\044\040\001\002\000\024\016\uffc9\017\uffc9\020\uffc9\025" +
    "\uffc9\026\uffc9\036\uffc9\042\uffc9\043\uffc9\044\uffc9\001\002" +
    "\000\022\004\uffe8\005\uffe8\014\uffe8\015\uffe8\021\uffe8\022" +
    "\uffe8\037\uffe8\040\uffe8\001\002\000\022\004\uffe6\005\uffe6" +
    "\014\uffe6\015\uffe6\021\uffe6\022\uffe6\037\uffe6\040\uffe6\001" +
    "\002\000\046\004\uffde\005\uffde\014\uffde\015\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\037\uffde\040\uffde" +
    "\001\002\000\004\037\070\001\002\000\046\004\uffda\005" +
    "\uffda\014\uffda\015\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\037\uffda\040\uffda\001\002\000\022\016\uffd1" +
    "\017\uffd1\025\uffd1\026\uffd1\036\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\001\002\000\022\016\uffd2\017\uffd2\025\uffd2\026\uffd2" +
    "\036\uffd2\042\uffd2\043\uffd2\044\uffd2\001\002\000\022\016" +
    "\035\017\051\025\034\026\033\036\043\042\047\043\054" +
    "\044\040\001\002\000\046\004\uffe0\005\uffe0\014\uffe0\015" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\037" +
    "\uffe0\040\uffe0\001\002\000\022\016\uffcb\017\uffcb\025\uffcb" +
    "\026\uffcb\036\uffcb\042\uffcb\043\uffcb\044\uffcb\001\002\000" +
    "\022\016\uffce\017\uffce\025\uffce\026\uffce\036\uffce\042\uffce" +
    "\043\uffce\044\uffce\001\002\000\022\016\035\017\051\025" +
    "\034\026\033\036\043\042\047\043\054\044\040\001\002" +
    "\000\022\016\uffcd\017\uffcd\025\uffcd\026\uffcd\036\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\001\002\000\022\016\uffcf\017\uffcf" +
    "\025\uffcf\026\uffcf\036\uffcf\042\uffcf\043\uffcf\044\uffcf\001" +
    "\002\000\022\016\uffcc\017\uffcc\025\uffcc\026\uffcc\036\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\001\002\000\022\016\035\017" +
    "\051\025\034\026\033\036\043\042\047\043\054\044\040" +
    "\001\002\000\022\016\uffd0\017\uffd0\025\uffd0\026\uffd0\036" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\001\002\000\046\004\uffe2" +
    "\005\uffe2\014\uffe2\015\uffe2\021\uffe2\022\uffe2\023\072\024" +
    "\071\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\037\uffe2\040\uffe2\001\002\000\026\004" +
    "\uffe4\005\uffe4\014\uffe4\015\uffe4\021\uffe4\022\uffe4\025\034" +
    "\026\033\037\uffe4\040\uffe4\001\002\000\004\040\110\001" +
    "\002\000\014\006\005\007\020\010\014\012\012\044\016" +
    "\001\002\000\020\002\ufff1\006\ufff1\007\ufff1\010\ufff1\012" +
    "\ufff1\041\ufff1\044\ufff1\001\002\000\016\006\005\007\020" +
    "\010\014\012\012\041\113\044\016\001\002\000\022\002" +
    "\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\041\uffff" +
    "\044\uffff\001\002\000\024\016\035\017\051\020\041\025" +
    "\034\026\033\036\043\042\047\043\054\044\040\001\002" +
    "\000\004\037\116\001\002\000\004\040\110\001\002\000" +
    "\022\002\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\041\ufff0\044\ufff0\001\002\000\004\013\121\001\002\000" +
    "\024\016\035\017\051\020\041\025\034\026\033\036\043" +
    "\042\047\043\054\044\040\001\002\000\004\014\123\001" +
    "\002\000\024\016\035\017\051\020\041\025\034\026\033" +
    "\036\043\042\047\043\054\044\040\001\002\000\006\015" +
    "\125\040\110\001\002\000\024\016\035\017\051\020\041" +
    "\025\034\026\033\036\043\042\047\043\054\044\040\001" +
    "\002\000\020\002\uffee\006\uffee\007\uffee\010\uffee\012\uffee" +
    "\041\uffee\044\uffee\001\002\000\004\040\110\001\002\000" +
    "\020\002\uffef\006\uffef\007\uffef\010\uffef\012\uffef\041\uffef" +
    "\044\uffef\001\002\000\004\002\000\001\002\000\020\002" +
    "\ufffc\006\ufffc\007\ufffc\010\ufffc\012\ufffc\041\ufffc\044\ufffc" +
    "\001\002\000\024\016\035\017\051\020\041\025\034\026" +
    "\033\036\043\042\047\043\054\044\040\001\002\000\006" +
    "\005\137\037\136\001\002\000\006\005\uffed\037\uffed\001" +
    "\002\000\004\004\ufff4\001\002\000\024\016\035\017\051" +
    "\020\041\025\034\026\033\036\043\042\047\043\054\044" +
    "\040\001\002\000\006\005\uffec\037\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\030\003\007\005\020\006\003\007\006\010" +
    "\005\011\021\012\016\013\010\014\012\015\014\016\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\023\007\006\010\005\011\021\012" +
    "\016\013\010\014\012\015\014\016\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\020\047" +
    "\021\055\022\044\023\041\024\045\025\030\026\031\027" +
    "\035\030\043\031\036\032\051\033\052\040\054\001\001" +
    "\000\006\033\102\035\076\001\001\000\004\034\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\020\066\021\055" +
    "\022\044\023\041\024\045\025\030\026\031\027\035\030" +
    "\043\031\036\032\051\033\052\040\054\001\001\000\002" +
    "\001\001\000\004\037\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\065\031\036\032\051\001\001\000" +
    "\002\001\001\000\022\024\064\025\030\026\031\027\035" +
    "\030\043\031\036\032\051\033\052\001\001\000\004\036" +
    "\056\001\001\000\030\022\060\023\041\024\045\025\030" +
    "\026\031\027\035\030\043\031\036\032\051\033\052\040" +
    "\054\001\001\000\002\001\001\000\004\037\061\001\001" +
    "\000\026\023\063\024\045\025\030\026\031\027\035\030" +
    "\043\031\036\032\051\033\052\040\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\027\073\030\043\031\036\032" +
    "\051\033\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\025\105\026\031\027\035\030" +
    "\043\031\036\032\051\033\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\026\104\027" +
    "\035\030\043\031\036\032\051\033\052\001\001\000\002" +
    "\001\001\000\004\034\072\001\001\000\004\033\102\001" +
    "\001\000\004\004\110\001\001\000\026\005\111\006\003" +
    "\007\006\010\005\011\021\012\016\013\010\014\012\015" +
    "\014\016\022\001\001\000\002\001\001\000\024\006\023" +
    "\007\006\010\005\011\021\012\016\013\010\014\012\015" +
    "\014\016\022\001\001\000\002\001\001\000\034\020\114" +
    "\021\055\022\044\023\041\024\045\025\030\026\031\027" +
    "\035\030\043\031\036\032\051\033\052\040\054\001\001" +
    "\000\002\001\001\000\004\004\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\020\121\021\055\022\044" +
    "\023\041\024\045\025\030\026\031\027\035\030\043\031" +
    "\036\032\051\033\052\040\054\001\001\000\002\001\001" +
    "\000\034\020\123\021\055\022\044\023\041\024\045\025" +
    "\030\026\031\027\035\030\043\031\036\032\051\033\052" +
    "\040\054\001\001\000\004\004\125\001\001\000\034\020" +
    "\126\021\055\022\044\023\041\024\045\025\030\026\031" +
    "\027\035\030\043\031\036\032\051\033\052\040\054\001" +
    "\001\000\002\001\001\000\004\004\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\017" +
    "\133\020\134\021\055\022\044\023\041\024\045\025\030" +
    "\026\031\027\035\030\043\031\036\032\051\033\052\040" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\020\137\021\055\022\044\023\041\024" +
    "\045\025\030\026\031\027\035\030\043\031\036\032\051" +
    "\033\052\040\054\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntaxParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntaxParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntaxParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntaxParser$actions {
  private final SyntaxParser parser;

  /** Constructor */
  CUP$SyntaxParser$actions(SyntaxParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SyntaxParser$do_action(
    int                        CUP$SyntaxParser$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxParser$parser,
    java.util.Stack            CUP$SyntaxParser$stack,
    int                        CUP$SyntaxParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxParser$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logic_not_operator ::= KEYWORD_SHINAI 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(30/*logic_not_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logic_and_operator ::= KEYWORD_MO 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(29/*logic_and_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logic_or_operator ::= KEYWORD_MATA 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(28/*logic_or_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // rel_operator ::= GREATER_THEN_OPERATOR 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(27/*rel_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rel_operator ::= LESS_THEN_OPERATOR 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(27/*rel_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // rel_operator ::= GREATER_THEN_OR_EQUALS_OPERATOR 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(27/*rel_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // rel_operator ::= LESS_THEN_OR_EQUALS_OPERATOR 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(27/*rel_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // rel_operator ::= NOT_EQUALS_OPERATOR 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(27/*rel_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // rel_operator ::= EQUALS_OPERATOR 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(27/*rel_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // aritm_mult_operator ::= DIV_OPERATOR 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(26/*aritm_mult_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // aritm_mult_operator ::= PRODUCT_OPERATOR 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(26/*aritm_mult_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // aritm_add_operator ::= SUB_OPERATOR 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(25/*aritm_add_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // aritm_add_operator ::= SUM_OPERATOR 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(25/*aritm_add_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bool_literal ::= KEYWORD_NISE 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(24/*bool_literal*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bool_literal ::= KEYWORD_SHIN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(24/*bool_literal*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // const ::= bool_literal 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("bool_literal", c); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(23/*const*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // const ::= NUMBER_LITERAL 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("number_literal", c); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(23/*const*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // const ::= TEXT_LITERAL 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("text_literal", c); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(23/*const*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // primitive_value ::= PARENTHESIS_OPENING value PARENTHESIS_CLOSURE 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		 RESULT = new Rule("parenthesis", v); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(22/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // primitive_value ::= IDENTIFIER 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("variable_value", id); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(22/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // primitive_value ::= const 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(22/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // aritm_unary_expression ::= primitive_value 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(21/*aritm_unary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // aritm_unary_expression ::= aritm_add_operator primitive_value 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("unary_expression", o, a); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(21/*aritm_unary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // aritm_mult_binary_expression ::= aritm_unary_expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*aritm_mult_binary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // aritm_mult_binary_expression ::= aritm_mult_binary_expression aritm_mult_operator aritm_unary_expression 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("binary_expression", o, a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*aritm_mult_binary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // aritm_add_binary_expression ::= aritm_mult_binary_expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(19/*aritm_add_binary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // aritm_add_binary_expression ::= aritm_add_binary_expression aritm_add_operator aritm_mult_binary_expression 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("binary_expression", o, a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(19/*aritm_add_binary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rel_expression ::= aritm_add_binary_expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(18/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rel_expression ::= aritm_add_binary_expression rel_operator aritm_add_binary_expression 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("binary_expression", o, a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(18/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logic_not_expression ::= rel_expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(17/*logic_not_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logic_not_expression ::= logic_not_operator rel_expression 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("unary_expression", o, a); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(17/*logic_not_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logic_and_expression ::= logic_not_expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(16/*logic_and_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logic_and_expression ::= logic_and_expression logic_and_operator logic_not_expression 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("binary_expression", o, a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(16/*logic_and_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logic_or_expression ::= logic_and_expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(15/*logic_or_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // logic_or_expression ::= logic_or_expression logic_or_operator logic_and_expression 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("binary_expression", o, a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(15/*logic_or_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // value ::= logic_or_expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(14/*value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parameters ::= parameters COMMA value 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule((Rule)p, v); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(13/*parameters*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parameters ::= value 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("parameters", v); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(13/*parameters*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // repeat_structure ::= KEYWORD_TAMENI IDENTIFIER KEYWORD_KARA value KEYWORD_MADE value scope_block 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).right;
		Object from = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object to = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("repeat_structure", id, from, to, sb); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(12/*repeat_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // repeat_structure ::= KEYWORD_TAMENI IDENTIFIER KEYWORD_KARA value KEYWORD_MADE value KEYWORD_HO value scope_block 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-7)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).right;
		Object from = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).right;
		Object to = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object step = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("repeat_structure", id, from, to, step, sb); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(12/*repeat_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simple_conditional_structure ::= KEYWORD_MOSHI PARENTHESIS_OPENING value PARENTHESIS_CLOSURE scope_block 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("conditional_structure", v, sb); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(11/*simple_conditional_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // conditional_structure ::= simple_conditional_structure KEYWORD_SOREIGAI scope_block 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule((Rule)s, sb); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(10/*conditional_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // conditional_structure ::= simple_conditional_structure 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(10/*conditional_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // assign_command ::= IDENTIFIER ASSIGNMENT_OPERATOR value 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("assign_command", i, v); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(9/*assign_command*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // output_command ::= KEYWORD_KAKU PARENTHESIS_OPENING parameters PARENTHESIS_CLOSURE 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		 RESULT = new Rule("output_command", p); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(8/*output_command*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // input_command ::= KEYWORD_YOMU PARENTHESIS_OPENING IDENTIFIER PARENTHESIS_CLOSURE 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		 RESULT = new Rule("input_command", i); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(7/*input_command*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // structure ::= repeat_structure 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(6/*structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // structure ::= conditional_structure 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(6/*structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // command ::= assign_command 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(5/*command*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command ::= output_command 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(5/*command*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command ::= input_command 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(5/*command*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= structure 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(4/*instruction*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= command SEMICOLON 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		 RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(4/*instruction*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // scope ::= scope instruction 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule((Rule)s, i); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(3/*scope*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // scope ::= instruction 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Rule("scope", i); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(3/*scope*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // scope_block ::= BLOCK_OPENING scope BLOCK_CLOSURE 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(2/*scope_block*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		RESULT = start_val;
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$SyntaxParser$parser.done_parsing();
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= scope 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		
    RESULT = new Rule("program", s);

    System.out.println(RESULT);

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

