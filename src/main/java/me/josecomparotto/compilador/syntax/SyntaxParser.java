
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Mon Apr 24 21:58:31 UTC 2023
//----------------------------------------------------

package me.josecomparotto.compilador.syntax;

import me.josecomparotto.compilador.semantic.*;
import me.josecomparotto.compilador.semantic.expression.*;
import me.josecomparotto.compilador.semantic.instruction.*;
import me.josecomparotto.compilador.semantic.literal.*;

/** CUP v0.10j generated parser.
  * @version Mon Apr 24 21:58:31 UTC 2023
  */
public class SyntaxParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntaxParser() {super();}

  /** Constructor which sets the default scanner. */
  public SyntaxParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\003\003\000\002\002\004\000\002\004" +
    "\005\000\002\005\003\000\002\005\004\000\002\006\004" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\012\003\000\002\012\003\000\002\020\003\000\002" +
    "\021\003\000\002\010\006\000\002\011\005\000\002\013" +
    "\003\000\002\013\003\000\002\015\011\000\002\014\007" +
    "\000\002\016\013\000\002\016\011\000\002\017\003\000" +
    "\002\022\005\000\002\022\003\000\002\023\005\000\002" +
    "\023\003\000\002\024\005\000\002\024\003\000\002\025" +
    "\004\000\002\025\003\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\030\005\000\002" +
    "\030\005\000\002\030\003\000\002\031\005\000\002\031" +
    "\005\000\002\031\003\000\002\027\004\000\002\027\004" +
    "\000\002\027\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\005\000\002\032\003\000\002\032\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\003\000\002\036\003" +
    "\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\012\006\006\007\015\011\014\046\020\001" +
    "\002\000\016\002\ufffe\006\ufffe\007\ufffe\011\ufffe\043\ufffe" +
    "\046\ufffe\001\002\000\014\002\001\006\006\007\015\011" +
    "\014\046\020\001\002\000\004\040\144\001\002\000\016" +
    "\002\ufffb\006\ufffb\007\ufffb\011\ufffb\043\ufffb\046\ufffb\001" +
    "\002\000\004\004\143\001\002\000\004\002\142\001\002" +
    "\000\004\004\ufff9\001\002\000\016\002\ufff8\006\ufff8\007" +
    "\ufff8\011\ufff8\043\ufff8\046\ufff8\001\002\000\004\046\131" +
    "\001\002\000\004\040\117\001\002\000\016\002\ufff1\006" +
    "\ufff1\007\ufff1\011\ufff1\043\ufff1\046\ufff1\001\002\000\004" +
    "\004\ufffa\001\002\000\004\037\023\001\002\000\016\002" +
    "\ufff2\006\ufff2\007\ufff2\011\ufff2\043\ufff2\046\ufff2\001\002" +
    "\000\016\002\ufff7\006\ufff7\007\ufff7\011\ufff7\043\ufff7\046" +
    "\ufff7\001\002\000\030\015\032\016\046\017\035\022\024" +
    "\023\055\027\051\030\027\040\037\044\044\045\052\046" +
    "\034\001\002\000\046\004\ufff6\013\ufff6\014\ufff6\020\ufff6" +
    "\021\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\041\ufff6" +
    "\042\ufff6\001\002\000\042\004\uffdd\013\uffdd\014\uffdd\020" +
    "\uffdd\021\uffdd\024\uffdd\027\106\030\103\031\104\032\102" +
    "\033\101\034\105\035\077\036\100\041\uffdd\042\uffdd\001" +
    "\002\000\046\004\uffda\013\uffda\014\uffda\020\uffda\021\uffda" +
    "\024\uffda\025\074\026\073\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\041\uffda\042\uffda" +
    "\001\002\000\022\015\032\016\046\022\024\023\055\040" +
    "\037\044\044\045\052\046\034\001\002\000\046\004\uffcf" +
    "\013\uffcf\014\uffcf\020\uffcf\021\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\041\uffcf\042\uffcf\001\002\000\046\004" +
    "\uffd7\013\uffd7\014\uffd7\020\uffd7\021\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\041\uffd7\042\uffd7\001\002\000\046" +
    "\004\uffca\013\uffca\014\uffca\020\uffca\021\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\041\uffca\042\uffca\001\002\000" +
    "\046\004\uffd3\013\uffd3\014\uffd3\020\uffd3\021\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\041\uffd3\042\uffd3\001\002" +
    "\000\046\004\uffd2\013\uffd2\014\uffd2\020\uffd2\021\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\041\uffd2\042\uffd2\001" +
    "\002\000\026\015\uffc7\016\uffc7\022\uffc7\023\uffc7\027\uffc7" +
    "\030\uffc7\040\uffc7\044\uffc7\045\uffc7\046\uffc7\001\002\000" +
    "\022\004\uffe6\013\uffe6\014\uffe6\020\uffe6\021\uffe6\024\uffe6" +
    "\041\uffe6\042\uffe6\001\002\000\030\015\032\016\046\017" +
    "\035\022\024\023\055\027\051\030\027\040\037\044\044" +
    "\045\052\046\034\001\002\000\046\004\uffd4\013\uffd4\014" +
    "\uffd4\020\uffd4\021\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\041\uffd4\042\uffd4\001\002\000\022\004\uffe8\013\uffe8" +
    "\014\uffe8\020\062\021\uffe8\024\uffe8\041\uffe8\042\uffe8\001" +
    "\002\000\016\004\uffec\013\uffec\014\uffec\024\066\041\uffec" +
    "\042\uffec\001\002\000\022\004\uffe4\013\uffe4\014\uffe4\020" +
    "\uffe4\021\uffe4\024\uffe4\041\uffe4\042\uffe4\001\002\000\046" +
    "\004\uffcd\013\uffcd\014\uffcd\020\uffcd\021\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\041\uffcd\042\uffcd\001\002\000" +
    "\004\004\ufff3\001\002\000\046\004\uffcb\013\uffcb\014\uffcb" +
    "\020\uffcb\021\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\041\uffcb\042\uffcb\001\002\000\046\004\uffcc\013\uffcc\014" +
    "\uffcc\020\uffcc\021\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\041\uffcc\042\uffcc\001\002\000\046\004\uffd0\013\uffd0" +
    "\014\uffd0\020\uffd0\021\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\041\uffd0\042\uffd0\001\002\000\022\015\032\016" +
    "\046\022\024\023\055\040\037\044\044\045\052\046\034" +
    "\001\002\000\046\004\uffce\013\uffce\014\uffce\020\uffce\021" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\041\uffce\042" +
    "\uffce\001\002\000\026\015\032\016\046\022\024\023\055" +
    "\027\051\030\027\040\037\044\044\045\052\046\034\001" +
    "\002\000\020\004\uffea\013\uffea\014\uffea\021\057\024\uffea" +
    "\041\uffea\042\uffea\001\002\000\046\004\ufff5\013\ufff5\014" +
    "\ufff5\020\ufff5\021\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036" +
    "\ufff5\041\ufff5\042\ufff5\001\002\000\030\015\032\016\046" +
    "\017\035\022\024\023\055\027\051\030\027\040\037\044" +
    "\044\045\052\046\034\001\002\000\030\015\uffc9\016\uffc9" +
    "\017\uffc9\022\uffc9\023\uffc9\027\uffc9\030\uffc9\040\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\001\002\000\022\004\uffe9\013\uffe9" +
    "\014\uffe9\020\062\021\uffe9\024\uffe9\041\uffe9\042\uffe9\001" +
    "\002\000\030\015\032\016\046\017\035\022\024\023\055" +
    "\027\051\030\027\040\037\044\044\045\052\046\034\001" +
    "\002\000\030\015\uffc8\016\uffc8\017\uffc8\022\uffc8\023\uffc8" +
    "\027\uffc8\030\uffc8\040\uffc8\044\uffc8\045\uffc8\046\uffc8\001" +
    "\002\000\022\004\uffe7\013\uffe7\014\uffe7\020\uffe7\021\uffe7" +
    "\024\uffe7\041\uffe7\042\uffe7\001\002\000\022\004\uffe5\013" +
    "\uffe5\014\uffe5\020\uffe5\021\uffe5\024\uffe5\041\uffe5\042\uffe5" +
    "\001\002\000\046\004\uffd6\013\uffd6\014\uffd6\020\uffd6\021" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\041\uffd6\042" +
    "\uffd6\001\002\000\030\015\032\016\046\017\035\022\024" +
    "\023\055\027\051\030\027\040\037\044\044\045\052\046" +
    "\034\001\002\000\020\004\uffeb\013\uffeb\014\uffeb\021\057" +
    "\024\uffeb\041\uffeb\042\uffeb\001\002\000\004\041\071\001" +
    "\002\000\046\004\uffd1\013\uffd1\014\uffd1\020\uffd1\021\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\041\uffd1\042\uffd1" +
    "\001\002\000\046\004\uffd5\013\uffd5\014\uffd5\020\uffd5\021" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\041\uffd5\042" +
    "\uffd5\001\002\000\026\015\032\016\046\022\024\023\055" +
    "\027\051\030\027\040\037\044\044\045\052\046\034\001" +
    "\002\000\026\015\032\016\046\022\024\023\055\027\051" +
    "\030\027\040\037\044\044\045\052\046\034\001\002\000" +
    "\046\004\uffd9\013\uffd9\014\uffd9\020\uffd9\021\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\041\uffd9\042\uffd9\001\002" +
    "\000\046\004\uffd8\013\uffd8\014\uffd8\020\uffd8\021\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\041\uffd8\042\uffd8\001" +
    "\002\000\026\015\032\016\046\022\024\023\055\027\051" +
    "\030\027\040\037\044\044\045\052\046\034\001\002\000" +
    "\026\015\032\016\046\022\024\023\055\027\051\030\027" +
    "\040\037\044\044\045\052\046\034\001\002\000\026\015" +
    "\032\016\046\022\024\023\055\027\051\030\027\040\037" +
    "\044\044\045\052\046\034\001\002\000\026\015\032\016" +
    "\046\022\024\023\055\027\051\030\027\040\037\044\044" +
    "\045\052\046\034\001\002\000\026\015\032\016\046\022" +
    "\024\023\055\027\051\030\027\040\037\044\044\045\052" +
    "\046\034\001\002\000\026\015\032\016\046\022\024\023" +
    "\055\027\051\030\027\040\037\044\044\045\052\046\034" +
    "\001\002\000\026\015\032\016\046\022\024\023\055\027" +
    "\051\030\027\040\037\044\044\045\052\046\034\001\002" +
    "\000\026\015\032\016\046\022\024\023\055\027\051\030" +
    "\027\040\037\044\044\045\052\046\034\001\002\000\046" +
    "\004\uffdc\013\uffdc\014\uffdc\020\uffdc\021\uffdc\024\uffdc\025" +
    "\074\026\073\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\041\uffdc\042\uffdc\001\002\000" +
    "\026\004\uffdf\013\uffdf\014\uffdf\020\uffdf\021\uffdf\024\uffdf" +
    "\027\106\030\103\041\uffdf\042\uffdf\001\002\000\026\004" +
    "\uffe2\013\uffe2\014\uffe2\020\uffe2\021\uffe2\024\uffe2\027\106" +
    "\030\103\041\uffe2\042\uffe2\001\002\000\046\004\uffdb\013" +
    "\uffdb\014\uffdb\020\uffdb\021\uffdb\024\uffdb\025\074\026\073" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\041\uffdb\042\uffdb\001\002\000\026\004\uffe3" +
    "\013\uffe3\014\uffe3\020\uffe3\021\uffe3\024\uffe3\027\106\030" +
    "\103\041\uffe3\042\uffe3\001\002\000\026\004\uffde\013\uffde" +
    "\014\uffde\020\uffde\021\uffde\024\uffde\027\106\030\103\041" +
    "\uffde\042\uffde\001\002\000\026\004\uffe1\013\uffe1\014\uffe1" +
    "\020\uffe1\021\uffe1\024\uffe1\027\106\030\103\041\uffe1\042" +
    "\uffe1\001\002\000\026\004\uffe0\013\uffe0\014\uffe0\020\uffe0" +
    "\021\uffe0\024\uffe0\027\106\030\103\041\uffe0\042\uffe0\001" +
    "\002\000\030\015\032\016\046\017\035\022\024\023\055" +
    "\027\051\030\027\040\037\044\044\045\052\046\034\001" +
    "\002\000\004\041\121\001\002\000\004\042\122\001\002" +
    "\000\012\006\006\007\015\011\014\046\020\001\002\000" +
    "\020\002\uffef\006\uffef\007\uffef\010\124\011\uffef\043\uffef" +
    "\046\uffef\001\002\000\004\042\122\001\002\000\016\002" +
    "\ufff0\006\ufff0\007\ufff0\011\ufff0\043\ufff0\046\ufff0\001\002" +
    "\000\014\006\006\007\015\011\014\043\130\046\020\001" +
    "\002\000\016\002\ufffd\006\ufffd\007\ufffd\011\ufffd\043\ufffd" +
    "\046\ufffd\001\002\000\020\002\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\043\uffff\046\uffff\001\002\000\004\012\132" +
    "\001\002\000\030\015\032\016\046\017\035\022\024\023" +
    "\055\027\051\030\027\040\037\044\044\045\052\046\034" +
    "\001\002\000\004\013\134\001\002\000\030\015\032\016" +
    "\046\017\035\022\024\023\055\027\051\030\027\040\037" +
    "\044\044\045\052\046\034\001\002\000\006\014\136\042" +
    "\122\001\002\000\030\015\032\016\046\017\035\022\024" +
    "\023\055\027\051\030\027\040\037\044\044\045\052\046" +
    "\034\001\002\000\016\002\uffed\006\uffed\007\uffed\011\uffed" +
    "\043\uffed\046\uffed\001\002\000\004\042\122\001\002\000" +
    "\016\002\uffee\006\uffee\007\uffee\011\uffee\043\uffee\046\uffee" +
    "\001\002\000\004\002\000\001\002\000\016\002\ufffc\006" +
    "\ufffc\007\ufffc\011\ufffc\043\ufffc\046\ufffc\001\002\000\030" +
    "\015\032\016\046\017\035\022\024\023\055\027\051\030" +
    "\027\040\037\044\044\045\052\046\034\001\002\000\004" +
    "\041\146\001\002\000\004\004\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\030\003\010\005\004\006\003\007\007\010" +
    "\016\011\011\012\006\013\012\014\015\015\020\016\021" +
    "\001\001\000\002\001\001\000\024\006\126\007\007\010" +
    "\016\011\011\012\006\013\012\014\015\015\020\016\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\017\044\020\047\021\027\022\041\023" +
    "\053\024\040\025\035\026\042\027\030\030\024\031\025" +
    "\032\037\033\032\034\046\037\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\047" +
    "\021\027\032\071\033\032\034\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\017\067\020\047\021\027\022\041\023\053\024\040" +
    "\025\035\026\042\027\030\030\024\031\025\032\037\033" +
    "\032\034\046\037\052\001\001\000\002\001\001\000\004" +
    "\036\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\047\021\027\032" +
    "\064\033\032\034\046\001\001\000\002\001\001\000\024" +
    "\020\047\021\027\026\063\027\030\030\024\031\025\032" +
    "\037\033\032\034\046\001\001\000\004\035\055\001\001" +
    "\000\002\001\001\000\032\020\047\021\027\024\057\025" +
    "\035\026\042\027\030\030\024\031\025\032\037\033\032" +
    "\034\046\037\052\001\001\000\002\001\001\000\004\036" +
    "\060\001\001\000\030\020\047\021\027\025\062\026\042" +
    "\027\030\030\024\031\025\032\037\033\032\034\046\037" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\020\047\021\027\023" +
    "\066\024\040\025\035\026\042\027\030\030\024\031\025" +
    "\032\037\033\032\034\046\037\052\001\001\000\004\035" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\020\047\021\027\027\075\032\037\033" +
    "\032\034\046\001\001\000\016\020\047\021\027\027\074" +
    "\032\037\033\032\034\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\020\047\021\027\027\030\030\115" +
    "\031\025\032\037\033\032\034\046\001\001\000\022\020" +
    "\047\021\027\027\030\030\114\031\025\032\037\033\032" +
    "\034\046\001\001\000\022\020\047\021\027\027\030\030" +
    "\113\031\025\032\037\033\032\034\046\001\001\000\022" +
    "\020\047\021\027\027\030\030\112\031\025\032\037\033" +
    "\032\034\046\001\001\000\020\020\047\021\027\027\030" +
    "\031\111\032\037\033\032\034\046\001\001\000\022\020" +
    "\047\021\027\027\030\030\110\031\025\032\037\033\032" +
    "\034\046\001\001\000\022\020\047\021\027\027\030\030" +
    "\107\031\025\032\037\033\032\034\046\001\001\000\020" +
    "\020\047\021\027\027\030\031\106\032\037\033\032\034" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\017\117" +
    "\020\047\021\027\022\041\023\053\024\040\025\035\026" +
    "\042\027\030\030\024\031\025\032\037\033\032\034\046" +
    "\037\052\001\001\000\002\001\001\000\004\004\122\001" +
    "\001\000\026\005\125\006\003\007\007\010\016\011\011" +
    "\012\006\013\012\014\015\015\020\016\021\001\001\000" +
    "\002\001\001\000\004\004\124\001\001\000\002\001\001" +
    "\000\024\006\126\007\007\010\016\011\011\012\006\013" +
    "\012\014\015\015\020\016\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\017\132\020" +
    "\047\021\027\022\041\023\053\024\040\025\035\026\042" +
    "\027\030\030\024\031\025\032\037\033\032\034\046\037" +
    "\052\001\001\000\002\001\001\000\040\017\134\020\047" +
    "\021\027\022\041\023\053\024\040\025\035\026\042\027" +
    "\030\030\024\031\025\032\037\033\032\034\046\037\052" +
    "\001\001\000\004\004\136\001\001\000\040\017\137\020" +
    "\047\021\027\022\041\023\053\024\040\025\035\026\042" +
    "\027\030\030\024\031\025\032\037\033\032\034\046\037" +
    "\052\001\001\000\002\001\001\000\004\004\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\017\144\020\047\021\027\022\041\023\053\024\040" +
    "\025\035\026\042\027\030\030\024\031\025\032\037\033" +
    "\032\034\046\037\052\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntaxParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntaxParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntaxParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntaxParser$actions {
  private final SyntaxParser parser;

  /** Constructor */
  CUP$SyntaxParser$actions(SyntaxParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SyntaxParser$do_action(
    int                        CUP$SyntaxParser$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxParser$parser,
    java.util.Stack            CUP$SyntaxParser$stack,
    int                        CUP$SyntaxParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxParser$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // logic_not_operator ::= KEYWORD_SHINAI 
            {
              String RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(29/*logic_not_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logic_and_operator ::= KEYWORD_MO 
            {
              String RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(28/*logic_and_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logic_or_operator ::= KEYWORD_MATA 
            {
              String RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = o; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(27/*logic_or_operator*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bool_literal ::= KEYWORD_NISE 
            {
              Value RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new BooleanLiteral(false); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(26/*bool_literal*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bool_literal ::= KEYWORD_SHIN 
            {
              Value RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new BooleanLiteral(true); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(26/*bool_literal*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // const ::= bool_literal 
            {
              Value RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value c = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(25/*const*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // const ::= NUMBER_LITERAL 
            {
              Value RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new NumberLiteral(c); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(25/*const*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // const ::= TEXT_LITERAL 
            {
              Value RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new TextLiteral(c); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(25/*const*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // primitive_value ::= input_line 
            {
              Value RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = v; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(24/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // primitive_value ::= input_value 
            {
              Value RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = v; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(24/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // primitive_value ::= PARENTHESIS_OPENING value PARENTHESIS_CLOSURE 
            {
              Value RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		 RESULT = v; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(24/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // primitive_value ::= IDENTIFIER 
            {
              Value RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Variable(id); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(24/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // primitive_value ::= const 
            {
              Value RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value c = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(24/*primitive_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // aritm_unary_expression ::= primitive_value 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(21/*aritm_unary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // aritm_unary_expression ::= SUB_OPERATOR primitive_value 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new UnarySubExpression(a); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(21/*aritm_unary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // aritm_unary_expression ::= ADD_OPERATOR primitive_value 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new UnaryAddExpression(a); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(21/*aritm_unary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // aritm_mult_binary_expression ::= aritm_unary_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(23/*aritm_mult_binary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // aritm_mult_binary_expression ::= aritm_mult_binary_expression DIV_OPERATOR aritm_unary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new DivExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(23/*aritm_mult_binary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // aritm_mult_binary_expression ::= aritm_mult_binary_expression PRODUCT_OPERATOR aritm_unary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new ProductExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(23/*aritm_mult_binary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // aritm_add_binary_expression ::= aritm_mult_binary_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(22/*aritm_add_binary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // aritm_add_binary_expression ::= aritm_add_binary_expression SUB_OPERATOR aritm_mult_binary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new SubExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(22/*aritm_add_binary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // aritm_add_binary_expression ::= aritm_add_binary_expression ADD_OPERATOR aritm_mult_binary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new AddExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(22/*aritm_add_binary_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rel_expression ::= aritm_add_binary_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rel_expression ::= aritm_add_binary_expression LESS_THEN_OR_EQUALS_OPERATOR aritm_add_binary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new LessThenOrEqualsExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rel_expression ::= aritm_add_binary_expression GREATER_THEN_OR_EQUALS_OPERATOR aritm_add_binary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new GreaterThenOrEqualsExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rel_expression ::= aritm_add_binary_expression GREATER_THEN_OPERATOR aritm_add_binary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new GreaterThenExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rel_expression ::= aritm_add_binary_expression LESS_THEN_OPERATOR aritm_add_binary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new LessThenExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rel_expression ::= aritm_add_binary_expression NOT_EQUALS_OPERATOR aritm_add_binary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new NotEqualsExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rel_expression ::= aritm_add_binary_expression EQUALS_OPERATOR aritm_add_binary_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new EqualsExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(20/*rel_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // logic_not_expression ::= rel_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(19/*logic_not_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logic_not_expression ::= logic_not_operator rel_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new NotExpression(a); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(19/*logic_not_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logic_and_expression ::= logic_not_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(18/*logic_and_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logic_and_expression ::= logic_and_expression logic_and_operator logic_not_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new AndExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(18/*logic_and_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logic_or_expression ::= logic_and_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(17/*logic_or_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logic_or_expression ::= logic_or_expression logic_or_operator logic_and_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new OrExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(17/*logic_or_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // concat_expression ::= logic_or_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(16/*concat_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // concat_expression ::= concat_expression CONCAT_OPERATOR logic_or_expression 
            {
              Value RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value a = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value b = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new ConcatExpression(a, b); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(16/*concat_expression*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // value ::= concat_expression 
            {
              Value RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = e; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(13/*value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // repeat_structure ::= KEYWORD_TAMENI IDENTIFIER KEYWORD_KARA value KEYWORD_MADE value context_block 
            {
              Instruction RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).right;
		Value from = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Value to = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Context cb = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new RepeatStructure(id, from, to, cb); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(12/*repeat_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // repeat_structure ::= KEYWORD_TAMENI IDENTIFIER KEYWORD_KARA value KEYWORD_MADE value KEYWORD_HO value context_block 
            {
              Instruction RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-7)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).right;
		Value from = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-5)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).right;
		Value to = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Value step = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Context cb = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new RepeatStructure(id, from, to, step, cb); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(12/*repeat_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // simple_conditional_structure ::= KEYWORD_MOSHI PARENTHESIS_OPENING value PARENTHESIS_CLOSURE context_block 
            {
              Instruction RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int tcbleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int tcbright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Context tcb = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new ConditionalStructure(v, tcb); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(10/*simple_conditional_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // complete_conditional_structure ::= KEYWORD_MOSHI PARENTHESIS_OPENING value PARENTHESIS_CLOSURE context_block KEYWORD_SOREIGAI context_block 
            {
              Instruction RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-4)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-4)).value;
		int tcbleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int tcbright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		Context tcb = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int ecbleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int ecbright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Context ecb = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new ConditionalStructure(v, tcb, ecb); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(11/*complete_conditional_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // conditional_structure ::= simple_conditional_structure 
            {
              Instruction RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(9/*conditional_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // conditional_structure ::= complete_conditional_structure 
            {
              Instruction RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(9/*conditional_structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // assign_command ::= IDENTIFIER ASSIGNMENT_OPERATOR value 
            {
              Instruction RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new AssignCommand(i, v); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(7/*assign_command*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // output_command ::= KEYWORD_KAKU PARENTHESIS_OPENING value PARENTHESIS_CLOSURE 
            {
              Instruction RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		 RESULT = new OutputCommand(v); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(6/*output_command*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // input_line ::= INPUT_LINE_KEY 
            {
              Value RESULT = null;
		 RESULT = new InputLine(); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(15/*input_line*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // input_value ::= INPUT_VALUE_KEY 
            {
              Value RESULT = null;
		 RESULT = new InputValue(); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(14/*input_value*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // structure ::= repeat_structure 
            {
              Instruction RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(8/*structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // structure ::= conditional_structure 
            {
              Instruction RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(8/*structure*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command ::= assign_command 
            {
              Instruction RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(5/*command*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command ::= output_command 
            {
              Instruction RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(5/*command*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= structure 
            {
              Instruction RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(4/*instruction*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= command SEMICOLON 
            {
              Instruction RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		 RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(4/*instruction*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // context ::= context instruction 
            {
              Context RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Context c = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 c.addInstruction(i); RESULT = c; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(3/*context*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // context ::= instruction 
            {
              Context RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		 RESULT = new Context(i); 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(3/*context*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // context_block ::= BLOCK_OPENING context BLOCK_CLOSURE 
            {
              Context RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Context s = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		 RESULT = s; 
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(2/*context_block*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).value;
		RESULT = start_val;
              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$SyntaxParser$parser.done_parsing();
          return CUP$SyntaxParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= context 
            {
              Program RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right;
		Context s = (Context)((java_cup.runtime.Symbol) CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).value;
		
    RESULT = new Program(s);

    System.out.println(RESULT);

              CUP$SyntaxParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxParser$stack.elementAt(CUP$SyntaxParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

